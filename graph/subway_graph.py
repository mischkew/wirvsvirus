import json
from math import sin, cos, sqrt, atan2, radians

import overpy

MERGE_DIST = 0.2


def get_subways():
    api = overpy.Overpass()
    query = """
    /*
    This has been generated by the overpass-turbo wizard.
    The original search was:
    “type=route & route=bus”
    */
    [out:json][timeout:25];
    // gather results
    (
      // query part for: “type=route and route=bus”
      relation["type"="route"]["route"='subway'](52.4,13.1,52.6,13.7);
    );
    // print results
    out body;
    >;
    out skel qt;
    """
    return api.query(query)


def is_station(mem):
    role = mem.role
    return role == "stop" or role == "stop_exit_only" or role == "stop_entry_only"


def get_stations(result):
    stations = []
    for rel in result.relations:
        for mem in rel.members:
            if is_station(mem):
                stations.append(mem.resolve())
    return stations


def stations_to_dict(stations):
    d = {}
    for station in stations:
        d[str(station.id)] = {
            "type": "station",
            "next_stops": [],
            "lat": float(station.lat),
            "lng": float(station.lon),
        }
    return d


def stations_to_latlon(stations):
    pairs = []
    for station in stations:
        s = station.resolve()
        pairs.append((s.lat, s.lon))
    return pairs


def connect_stations(stations_dict, result):
    for rel in result.relations:
        last = rel.members[0].resolve()
        for mem in rel.members[1:]:
            if is_station(mem):
                mem = mem.resolve()
                stations_dict[str(last.id)]["next_stops"].append(str(mem.id))
                last = mem


def dist(lat1, lon1, lat2, lon2):
    # approximate radius of earth in km
    R = 6373.0

    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance


def merge_stations(stations_dict):
    for id, station in stations_dict.items():
        if "deleted" in station:
            continue
        for id2, station2 in stations_dict.items():
            if "deleted" in station2:
                continue
            if id == id2:
                continue
            lat1 = station["lat"]
            lng1 = station["lng"]
            lat2 = station2["lat"]
            lng2 = station2["lng"]
            if dist(lat1, lng1, lat2, lng2) < MERGE_DIST:
                station["next_stops"].extend(station2["next_stops"])
                station2["deleted"] = True
                for station3 in stations_dict.values():
                    station3["next_stops"] = [
                        id if id3 == id2 else id3 for id3 in station3["next_stops"]
                    ]
    cleaned = {i: s for i, s in stations_dict.items() if "deleted" not in s}
    return cleaned


def write_stations_dict(stations_dict):
    with open("stations.json", "w") as f:
        json.dump(stations_dict, f)


def create_subway_graph():
    res = get_subways()
    stations = get_stations(res)
    d = stations_to_dict(stations)
    connect_stations(d, res)
    d = merge_stations(d)
    return {"stations": d}


if __name__ == "__main__":
    d = create_subway_graph()
    write_stations_dict(d)
